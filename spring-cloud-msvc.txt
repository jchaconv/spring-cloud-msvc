
Repos del curso:

https://github.com/in28minutes/spring-microservices/tree/master/02.restful-web-services
https://github.com/in28minutes/spring-microservices/tree/master/03.microservices


Mi repo:

https://github.com/jchaconv/spring-cloud-msvc


Web Service: Software system design to support
1*interoperable(otras aplicaciones se pueden comunicar con el ws sin importar las tecnologías en las que estén desarrolladas)
2*machine-to-machine(or application-to-application) 3*interaction over a network(para ser un ws debe poder ser invocado desde otro lugar).

Service definition:
Estructura y formato(XML o JSON) de request y response
Url expuesta para invocación o endpoints

Transport:
- Http (over the internet)
- MQ (over a queue)

SOAP (Simple object access protocol) :
* Es un formato de XML

- Specific way of building ws
- Solo usa XML
- Define la estructura de request y response en SOAP-Header y SOAP-Body (ambos contenidos en un SOAP-Envelope)
- Puede comunicarse mediante HTTP o MQ

- Service definition mediante WSDL (Web service defiinition language)
   -> Contiene endpoint, operations, request/response structure  

REST (REpresentational state transfer) :
* Es un "architectural style"

- Utiliza los conceptos presentes en HTTP
- Request usa los métodos de http(get, post, put, etc)
- Response incluye los códigos http(200, 404, 500, etc)
- Los recursos(aquello que se quiere exponer en el ws) tienen URI(uniform resource identifier)
  y pueden tener representaciones en xml, json(popular), html
- Solo HTTP 
- Para el service definition no hay un standard. WADL, SWAGGER son conocidos


Evitar las versiones SNAPSHOT
version: 3.0.0(M4) -> java17 o superior
mejor usar 2.x.x (2.7.16)
groupid: com.rest.webservices
artifactid: restful-web-services

dependencies: springweb, jpa, h2, devtools(optional)

hacer HelloWorldController
* GetMapping:
    - de un string
    - de un obj que tenga campo message (retorna json porque el @ResponseBody incluido
      en @RestContoller)

Si se quiere agregar debug logging poner esto en properties:
logging.level.org.springframework=debug

El DispatcherServlet es el componente autoconfigurado que recibe las peticiones y las trata
en su respectivo controller. 

PathVariable:

/v1/{name}
@PathVariable String name
String.format("Hello World, %s", name)


Social Media Application Rest API:

Users y Posts api's

- Crear beans : User
- Crear dao: UserDao -> retorna lista static, aún no se usa JPA/Hibernate
- En el UserController crear los métodos para findAll, findById, save


te voy a enseñar cómo obtener un usuario mediante su id en un api rest


http://localhost:8080/api/v1/users

{
    "name": "Rut",
    "birthDate": "1992-11-06"
}


200 success
201 created
204 no content
401 unauthorized
400 bad request
404 resource not found
500 Server error

Response status 201 para el save
- return ResponseEntity.created(null).build(); -> dejar el location como null, cambiar
  para ver el detalle(Location) del obj creado en Response headers

- findById con return null en el dao y exception en el controller
  Es importante el @ResponseStatus en el exception para q retorne el statusCode esperado


Generic Exception(para personalizar el body response de un error):
- Crear ErrorDetails

Solo con el UserNotFoundException tenía esta estructura el response:

{
    "timestamp": "2023-09-22T15:50:14.599+00:00",
    "status": 404,
    "error": "Not Found",
    "path": "/api/v1/users/211"
}

Luego de agregar la clase CustomizedResponseEntityExceptionHandler donde se usa:
 
- @ControllerAdvice
- extends ResponseEntityExceptionHandler 
- @ExceptionHandler(UserNotFoundException.class)

Se ve así(con el body que definimos en ErrorDetails):

{
    "timestamp": "2023-09-22T11:07:35.5043472",
    "message": "id: 99",
    "details": "uri=/api/v1/users/99"
}


DELETE:
- deleteById en el dao y controller
Las pruebas salieron bien

-------------------------------------------------------------------------------


Validations rest api:
- Agregar la dependency de validación y actualizar mvn, copiar y pegar la del starter
- Agregar @Valid de Jakarta en el PostMapping del controller (lo que hace es evaluar las validaciones del objeto Request)
- Agregar @Past @Size a los campos de User. Mostrar las demás validaciones existentes(abrir ubicación de la clase)

-> en las pruebas retorna 400 Bad Request PERO SIN BODY

- Agregar messages en las validaciones de la clase User
- Para personalizar hacer un override de handleMethodArgumentNotValid en CustomizedResponseEntityExceptionHandler
- Reemplazar el getMessage por getFieldError para q solo retorne el mensaje personalizado y no toda la traza. Objects.requireNonNull
  fue agregado para quitar el warning. Aquí también se puede concatear el ex.getErrorCount para un detalle más personalizado en el message.

- El response salió así:
{
    "timestamp": "2023-09-22T11:53:40.3956405",
    "message": "Name should have at least 3 characters",
    "details": "uri=/api/v1/users"
}


-------------------------------------------------------------------------------

* Rest Api Documentation

Para entender los resources, actions y req/resp structure (validations)
Retos para la documentacion: actualizada, correcta y consistente.
Lo mejor es hacerla desde el código y no mantenerla manualmente.

Swagger y OpenAPI

- googlear springdoc openapi, también abrir el enlace de github (springdoc-openapi-v1)
- Añadir dependency en el pom. Version 1.7.0 para springboot 2.x.x
- Ver:
  http://localhost:8080/swagger-ui.html
  http://localhost:8080/v3/api-docs

-------------------------------------------------------------------------------

* Content Negotiation
Mediante el uso de headers se establece si espera format XML o JSON.
Escoger entre diferentes lenguajes.

- Agregar dependency de jackson, reiniciar y probar
- Añadir en headers: Accept -> application/xml


-------------------------------------------------------------------------------


* Internationalization i18n

en English
nl Dutch
fr French
de Deutsch

- Crear messages.properties en resources
- En HelloWorldController agregar:
    + MessageSource y constructor
    + Método getMessageInternationalized()
- Crear messages_fr.properties e ir modificando según corresponda.
- Probar agregando: Accept-Language -> fr


-------------------------------------------------------------------------------


* Versioning Rest API
Es mejor el versionamiento si se va a cambiar la estructura del response
para no impactar a los consumers. Es la mejor práctica el versionamiento
que el cambio en producción.
- VersioningPersonController
- Opciones para el versioning:
 + URI versioning
    -http://localhost:8080/v1/person
    -http://localhost:8080/v2/person
 + Request Parameter versioning
    -http://localhost:8080/person?version=1
    -http://localhost:8080/person?version=2
 + (Custom) headers versioning:
    -http://localhost:8080/person (X-API-VERSION=1)
    -http://localhost:8080/person (X-API-VERSION=2)
 + Media Type versioning (a.k.a "content negotiation" or "accept header")
    (methods: getFirstVersionOfPersonAcceptHeader and getSecondVersionOfPersonAcceptHeader)
    (use the header accept)
    -SAME-URL produces=application/my.own.app-v1+json
    -SAME-URL produces=application/my.own.app-v2+json

-------------------------------------------------------------------------------

* HATEOAS (Hypermedia as the engine of application state)
to create links between api's

- Agregar dependency en el pom
- UserController getUserById, se generó link para allUsers con las clases:
EntityModel y WebMvcLinkBuilder

http://localhost:8080/api/v1/users/1

{
    "id": 1,
    "name": "Julio",
    "birthDate": "1995-12-12",
    "_links": {
        "all-users": {
            "href": "http://localhost:8080/api/v1/users"
        }
    }
}

-------------------------------------------------------------------------------

* Implementing Static Filtering for REST API

- Serialization: Convert object to STREAM (ex: list to JSON)
  Serialization in Java with JACKSON

- Customize field names in response. En la clase User:
    @JsonProperty("user_name")
    private String name;
  Ahora el response se ve así:
  {
      "id": 1,
      "birthDate": "1995-12-12",
      "user_name": "Julio",  <---------
      "_links": {
          "all-users": {
              "href": "http://localhost:8080/api/v1/users"
          }
      }
  }

- Return only selected fields:
    (FilteringController y SomeBean)
    -Static filtering:
        @JsonIgnoreProperties (uno o más) y @JsonIgnore (uno)
        para que no retorne campo(s)
    -Dynamic filtering:
        *Para que usando el mismo bean se pueda manejar diferente lógica de filtering
        en las api's. Se tiene que manejar en el Controller con MappingJacksonValue y
        en el bean se define el nombre del filter con @JsonFilter. Me parece mucha lógica
        y nada práctico.

        *Por ahora he visto que se tiene que agregar el mismo filtering a ambos métodos(por confirmar
        si se puede usar solo en el que sea necesario porque así no me gusta)


-------------------------------------------------------------------------------

* Monitoring APIs with Spring Boot Actuator

Monitoring and manage application in production. Endpoints:
-beans
-health
-metrics
-mappings
-etc...

Se agrega dependency al pom.xml
invocar(hay links a otras api's): http://localhost:8080/actuator

Para exponer todas las api's de actuator agregar en properties:

management.endpoints.web.exposure.include=*

En el endpoint beans están todas las clases y dependencias.

-------------------------------------------------------------------------------

* Exploring APIs with Spring Boot HAL Explorer

HAL(Json Hypertext Application Language)
Es un formato que provee links entre los recursos del API

"all-users" en "_links" en Hateoas usa el formato HAL

HAL Explorer es un API que ayuda a explorar las API's

Esto permite que las personas "non-technical" de mi equipo puedan
tener la info de las api's de una manera amigable


- Agregar dependency en el pom.xml
- Ingresar a localhost:8080
    Edit headers: /actuator      -> click en GO

/api/v1/users/1      -> se muestra el link amigable porque reconoce el formato HAL

-------------------------------------------------------------------------------


****************************************
 * Inicio - JPA and HIBERNATE section *
****************************************

Config del proyecto 02-jpa-hibernate

version: 2.7.16
groupid: com.mcsv.restful
artifactid: jpa-hibernate

Dependencies:

-Spring web
-Spring Data JDBC
-Spring Data JPA
-H2 Database

-------------------------------------------------------------------------------

* Launching up H2 Console and Creating Course Table in H2

- Agregar en properties:
    spring.h2.console.enabled=true

- Ir a localhost:8080/h2-console
- Buscar en el log de la consola la url dinámica y ponerlo en JDBC Url:
    jdbc:h2:mem:07315379-f12d-42ab-8418-3bbaf86abffb

- Agregar en properties ara establecer como estática la url:
    spring.datasource.url=jdbc:h2:mem:testdb

- Para tener tablas en la db agregar en resources schema.sql
    En la consola H2 ejecutar: SELECT * FROM COURSE;

-------------------------------------------------------------------------------

* SPRING JDBC *

Se apoya en el uso de queries(puede crecer descomunalmente, ver JdbcRepository)
y provee de métodos mediante JdbcTemplate para ejecutar dichos queries.


INSERT INTO COURSE (id, name, author)
VALUES(1, 'Lear AWS', 'in28minutes');

SELECT * FROM COURSE;

DELETE FROM COURSE WHERE id=1;

JDBC: write a lot of queries and a lot of java code
Spring JDBC: write a lot of queries but lesser java code

(Atención con las anotaciones!)

- Se crea un ejemplo con Spring JDBC -> JdbcRepository

.update() para sentencias: INSERT, UPDATE or DELETE

- Se crea JdbcCommandLineRunner para usar el método run y ejecutar
el insert del Repository. (Se usó CommandLineRunner para ejecutar código
"aislado" al levantar la aplicación).

En la consola h2 ejecutar un select * from course y se ve el registro añadido desde la aplicación.

- Se agregó el método insertDynamic y deleteDynamic en JdbcRepository para usar un query dinámico y pasarle los valores
mediante un objeto java.

- Para retornar data de la base de datos selectDynamic() en el repository
queryForObject trae un ResultSet de la bd y lo transforma al bean mediante un rowMapper

-------------------------------------------------------------------------------

* JPA *
Mapea el java bean to the table. Se usará EntityManager.
Do not worry about queries, just map entities to tables!

- Se modificó Course, usar los imports de jakarta
- CourseJpaRepository:
    - Se pudo usar @Autowired pero @PersistenceContext es más específica
    - Usar @Transactional por las operaciones que se están realizando
    - se usan los métodos apropiados de EntityManager y ya no nos preocupamos por los queries
    - se usa merge() para agregar Course
    - find() y el parámetro para la búsqueda
    - remove() para el delete
    - En CourseCommandLineRunner se comentó toda la impl de JDBC
    - Agregar en properties: spring.jpa.show-sql=true para ver los queries ejecutados en la consola

Es más sencillo que usar JDBC, entonces para qué Spring Data JPA?

-------------------------------------------------------------------------------

* SPRING DATA JPA *
- Hace más sencillo el uso de JPA
- Don't worry about EntityManager, spring will take care of everything
- Se creó CourseSpringDataJpaRepository y extiende de JpaRepository y esta clase del package spring.data hace toda la "magia"
- Se editó el CommandLineRunner
- Se crea mucho menos código, solo se necesita crear la interfaz que extienda de JpaRepository
- La ventaja que da es que se puede cambiar de base de datos con cambios en el .properties

-Se pueden usar varios métodos de spring data
-Se puede crear un método personalizado pero debe mantener la convención de nombre
para que spring data haga el query automáticamente. Ej: findByAuthor


* HIBERNATE VS JPA *

JPA: Es el API, como una interfaz
jakarta.persistenca.Entity
jakarta.persistenca.Id
- Cómo se definen los entities, con @Entity
- Cómo se mapean los atributos, con @Id, @Column

Hibernate: Es la implementación más popular de JPA
Para usar Hibernate directamente en el proyecto se pueden usar
las anotaciones como esta:
org.hibernate.annotations.Entity
(esto se dijo en el video pero veo que está deprecated)

-------------------------------------------------------------------------------

* Using JPA and HIBERNATE *

Volviendo al proyecto 01-restful:

- Añadir en properties:
    spring.h2.console.enabled=true
- Agregar las anotaciones de jakarta en User
- Configure static h2 url en properties:
    spring.datasource.url=jdbc:h2:mem:testdb

- Ejecutar: SELECT * FROM USER_DETAILS;
- Crear en /resources/data.sql
- Añadir en properties:
    spring.jpa.defer-datasource-initialization=true
    (para retrasar la inicialización del datasource y se ejecute el script
    en el archivo data.sql)


- Crear UserRepository, UserJpaController. Se probaron los métodos en postman, funcionan bien.
(Si me dejó crear user incluso con el nombre del campo cambiado a user_name)

-------------------------------------------------------------------------------

* Creating Post Entity with Many to One Relationship with User Entity *

- Crear clase Post
- @OneToMany en la clase User y el mappedBy para hacer match con la relación en la clase Post
específicamente en el atributo user. Por eso el mappedBy es "user"
- @ManyToOne en la clase Post y no agregamos mappedBy y @JsonIgnore.
    fetch: EAGER(todo junto), LAZY(no quiero toda la info)
- Agregamos @JsonIgnore en User para no mostrar en el response la lista de posts.
- Agregar en properties:
    (para mostrar los queries que se ejecutan)
    spring.jpa.show-sql=true

- Agregar inserts en post en data.sql

Hasta aquí se pudo establecer la relación entre las tablas User y Post

-------------------------------------------------------------------------------

API's para información de Post entity

- Se agregaron api's en UserJpaController
- Se creó el PostRepository

-------------------------------------------------------------------------------

* Connecting to MYSQL database *

1.- Ejecutar comandos:

docker run -d --name mysql-container -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=social-media-database mysql:latest

En cmd se puede entrar así:
docker exec -it mysql-container /bin/bash
bash-4.4# mysql -u root -p
Enter password:
    mysql>

use social-media-database;
select * from user_details;
select * from post;


2.- Agregar en properties:
(comentar la url de h2)

spring.datasource.url=jdbc:mysql://localhost:3306/social-media-database?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=password

spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect


3.- Editar pom.xml, comentar la dependency de H2 y agregar:

<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.27</version>
</dependency>

Con estas configuraciones probé las api's y funcionaron bien

-------------------------------------------------------------------------------

* Implementing Basic Authentication with Spring Security *

- Agregar dependency:
<dependency>
    <groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-security</artifactId>
</dependency>

- Reiniciar app y cuando invoque en el navegador a cualquier api
me saldrá el login simple.
user: user
password está en la consola

-Agregar en properties para cambiar las credenciales:
spring.security.user.name=jchaconv
spring.security.user.password=miespositaloquita

* Enhancing Spring Security Configuration for Basic Authentication *

Spring Security usa
    Filter Chains
        - Todos los requests autenticados
        - Si un request no está autenticado se muestra una página
        - CSRF -> POST, PUT


- Crear la clase SpringSecurityConfiguration
Se mapean los 3 pasos que se usan en los filters de spring security
para el basic authentication.


-------------------------------------------------------------------------------

* MICROSERVICES *

Microservice architectural style is an approach to
developing a single application as a suite of small
services, each running in its own process and communicating
with lightweight mechanisms, often an HTTP resource API

These services are built around business capabilities and
independently deployable by fully automated deployment machinery

Small autonomous service that work together.

- rest
- Cloud enable: multiple instances si se tiene mayor carga.

Retos de los microservicios:
-Establecer límites en el desarrollo: Se va dando en el desarrollo,
ningún diseño es perfecto a la primera
-Visibility and monitoring:
    * Zipkin distributed tracing
    * Netflix API Gateway
- Dynamic scale up and down
    * Naming Server (Eureka)
    * Ribbon (Client Side Load Balancing) -> Fue reemplazado por Spring Cloud Load Balancer
    * Feign (Easier Rest Clients)
- Fault Tolerance
    * Hystrix -> Reemplazado por Resilience4j

Benefits of microservices:
* New technology and process adaption
* Dynamic scaling
* Faster release cycles

Tener en cuenta los ports para los diferentes servicios que se usarán:

https://github.com/in28minutes/spring-microservices/tree/master/03.microservices

-------------------------------------------------------------------------------

* MICROSERVICES WITH SPRING CLOUD *

Important changes:

- Spring Cloud Load Balancer instead of Ribbon
- Spring Cloud Gateway instead of Zuul
- Resilience4j instead of Hystrix

Docker to containerize the microservices and Kubernetes to orchestrate all of the microservices.

-------------------------------------------------------------------------------

* Limits microservice *

spring initializr
(solo están las versiones 3.x.x y java 17, se tiene que cambiar manualmente en el pom)
(tuve que actualizar la versión de spring cloud a 2021.0.8 para que sea compatible con spring boot 2.x.x)

version: 2.7.16
groupid: com.neoris.mcsvc
artifactid: limits-service

dependencies:
-springweb
-devtools
-actuator
-config client


- Agregar en properties:
(Esta config es necesaria por tener el import de Config Client)
spring.config.import=configserver:http://localhost:8888


- Crear LimitsController y agregar en properties para tomar los valores de aquí:
limits-service.minumum=2
limits-service.maximum=998

-------------------------------------------------------------------------------

*  Setting up Spring Cloud Config Server *

(Cambiar manualmente las versiones)
spring initializr
version: 2.7.16
groupid: com.neoris.mcsvc
artifactid: spring-cloud-config-server

spring-cloud.version: 2021.0.8

dependencies:
-devtools
-config server

- Agregar en properties:
spring.application.name=spring-cloud-config-server
server.port=8888

Agregar en el archivo limits-service.properties:
limits-service.minumum=4
limits-service.maximum=996

- En 04-spring-cloud-config-server en el archivo properties:
spring.cloud.config.server.git.uri=file:///D:/cursos-udemy/spring-cloud-msvc/git-localconfig-repo

Y la anotación @EnableConfigServer en la clase principal(SpringCloudConfigServerApplication.java)

- Ingresar a localhost:8888/limits-service/default
Retorna un json. Con esto ya tenemos centralizada la configuracion

-------------------------------------------------------------------------------

* Connect Limits Service to Spring Cloud Config Server *

En 03-limits-service agregar:
spring.application.name=limits-service

Ya tenía la otra llave que referencia al config-server
con este cambio al invocar al api llama a los valores del properties local
del server

-------------------------------------------------------------------------------

* Configuring Profiles for limits-service *

en el repo local se agregan archivos con -dev -qa
Ir a localhost:8888/limits-service/dev ir retornará la config de dev y default

Si quiero dejar uno activo agregar en properties:
spring.profiles.active=dev
spring.cloud.config.profile=dev

Debería salir esto:
c.n.m.l.LimitsServiceApplication         : The following 1 profile is active: "dev"

Se pueden crear muchos properties, incluso de diferentes microservicios y esa es la ventaja
de tener todo centralizado.

-------------------------------------------------------------------------------

*  Setting up currency-exchange-service *
(Cambiar manualmente las versiones)
spring initializr
version: 2.7.16
groupid: com.neoris.mcsvc
artifactid: currency-exchange-service

spring-cloud.version: 2021.0.8

dependencies:
-web
-config client
-actuator

- Agregar en properties:
spring.config.import=optional:configserver:http://localhost:8888
spring.application.name=currency-exchange
server.port=8000


Currency Exchange Service:
http://localhost:8000/currency-exchange/from/USD/to/PER

Response structure:
{
   "id":10001,
   "from":"USD",
   "to":"INR",
   "conversionMultiple":65.00,
   "environment":"8000 instance-id"
}

-------------------------------------------------------------------------------

* Setting up Dynamic Port in the Response *

Se agrega la clase Environment en CurrencyExchangeController getExchangeValue() para obtener el port y retornarlo en el response.

Hay una opción en eclipse para tener dos instancias de la aplicación en puertos diferentes. Cuando hizo esa prueba se ve que el puerto
en el response también cambia. Con esto se tiene identificado cuál instancia se está usando.

-------------------------------------------------------------------------------

* Configure JPA and Initialized Data *

- Se agregaron las dependencias:

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>

<dependency>
    <groupId>com.h2database</groupId>
	<artifactId>h2</artifactId>
	<scope>runtime</scope>
</dependency>

- Agregar en properties:

spring.h2.console.enabled=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.jpa.show-sql=true

- Mapear como Entity la clase CurrencyExchange
Se cambió el nombre de los campos para las tablas con @Column para evitar conflictos con SQL
Hasta aquí ya fue creada la tabla y se puede ver en:
http://localhost:8000/h2-console

- Crear resources/data.sql para insertar datos en la tabla.

- Debido a que en estas versiones de spring boot la data se inserta antes que se creen las tablas
se necesita agregar en properties:
spring.jpa.defer-datasource-initialization=true

Con este cambio ya se ve la tabla con los datos correspondientes.

- Se crea CurrencyExchangeRepository y un método custom. Luego se agrega al controller.
Hasta aquí se muestra la info de la bd correctamente en el api.

-------------------------------------------------------------------------------

*  Setting up currency-conversion-service *
(Cambiar manualmente las versiones)
spring initializr
version: 2.7.16
groupid: com.neoris.mcsvc
artifactid: currency-conversion-service

spring-cloud.version: 2021.0.8

dependencies:
-web
-config client
-actuator

- Agregar en properties:
spring.config.import=optional:configserver:http://localhost:8888
spring.application.name=currency-conversion
server.port=8100


Currency Conversion Service:
http://localhost:8100/currency-conversion/from/USD/to/PER/quantity/10

Response structure:

{
  "id": 10001,
  "from": "USD",
  "to": "INR",
  "conversionMultiple": 65.00,
  "quantity": 10,
  "totalCalculatedAmount": 650.00,
  "environment": "8000 instance-id"
}

- Crear CurrencyConversionController se pone data en duro en el método calculateCurrencyConversion()

- Para llamar a currency-exchange-service se usa RestTemplate en calculateCurrencyConversion()
El nuevo response queda de esta manera:
{
    "id": 10001,
    "from": "USD",
    "to": "PER",
    "quantity": 3.75,
    "conversionMultiple": 10,
    "totalCalculatedAmount": 37.50,
    "environment": "8000"
}

-------------------------------------------------------------------------------

* Using Feign REST Client for Service Invocation *

Para no tener que repetir todo el código del ejemplo anterior se usa FEIGN, un framework provisto por Spring Cloud
para la comunicación entre microservicios.

- Agregar dependency:
<dependency>
    <groupId>org.springframework.cloud</groupId>
	<artifactId>spring-cloud-starter-openfeign</artifactId>
</dependency>

- Agregar @EnableFeignClients en la clase principal

- Crear CurrencyExchangeProxy. Poner el nombre del mcsvc a invocar en @FeignClient

Tomar el "encabezado" del método del Controller del otro servicio
y poner como objeto de response nuestro Entity ya que será mapeado por spring automáticamente con los campos que hagan match.
Ya no se usa todo el path sino solo la uri necesaria.


- En CurrencyConversionController se crea un nuevo método que use el proxy y se reduce el código a una línea.

Todas las pruebas salieron bien hasta aquí

-------------------------------------------------------------------------------

* Understand Naming Server and Setting up Eureka Naming Server *

Como en CurrencyExchangeProxy se tiene hardcodeado localhost:8000 y surge la necesidad de tener varias instancias del microservicio
es necesario crear un NamingServer que actúe como un loadBalancer para todas las instancias del mcsvc

(Cambiar manualmente las versiones)
spring initializr
version: 2.7.16
groupid: com.neoris.mcsvc
artifactid: naming-server

spring-cloud.version: 2021.0.8

dependencies:
-eureka server
-devtools
-actuator

- Agregar @EnableEurekaServer en la clase principal

- Agregar en properties:

spring.application.name=naming-server
server.port=8761

#Eureka recommendations:
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false

#For debugging
#eureka.instance.prefer-ip-address=true
#eureka.instance.hostname=localhost

- Ingresar a http://localhost:8761/ y se carga el home de nuestro server

- Agregar la dependency de eureka-client en los mcsvc currency-exchange y currency-conversion para registrarlos en el server:

<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
</dependency>

- Agregar en properties de ambos mcsvc:

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

Hasta aquí hemos registrado nuestros dos mcsvc en eureka-server

-------------------------------------------------------------------------------

* Load Balancing with Eureka, Feign & Spring Cloud LoadBalancer *

- Quitar el port de CurrencyExchangeProxy para que al conectarse con el naming-server se haga el load-balancing
con las instancias activas de currency-exchange

- NO pude levantar otra instancia del servicio currency-exchange en un port distinto.
Sin embargo, el load-balancing es automático y viene gracias a eureka-server.
Se puede probar haciendo requests y se ve que ambas insntacias responden. También se puede probar
dando de baja a una instancia y levantando otra.



-------------------------------------------------------------------------------







-------------------------------------------------------------------------------







-------------------------------------------------------------------------------







-------------------------------------------------------------------------------







